// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RPCMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RPCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RPCMessage_2eproto() {
  protobuf_AddDesc_RPCMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RPCMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RPCRequest_descriptor_ = file->message_type(0);
  static const int RPCRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, methodname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, params_),
  };
  RPCRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCRequest_descriptor_,
      RPCRequest::default_instance_,
      RPCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCRequest));
  RPCResponse_descriptor_ = file->message_type(1);
  static const int RPCResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, retvalue_),
  };
  RPCResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCResponse_descriptor_,
      RPCResponse::default_instance_,
      RPCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RPCMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCRequest_descriptor_, &RPCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCResponse_descriptor_, &RPCResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RPCMessage_2eproto() {
  delete RPCRequest::default_instance_;
  delete RPCRequest_reflection_;
  delete RPCResponse::default_instance_;
  delete RPCResponse_reflection_;
}

void protobuf_AddDesc_RPCMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020RPCMessage.proto\"@\n\nRPCRequest\022\016\n\006call"
    "id\030\001 \002(\005\022\022\n\nmethodName\030\002 \002(\t\022\016\n\006params\030\003"
    " \002(\014\"/\n\013RPCResponse\022\016\n\006callid\030\001 \002(\005\022\020\n\010r"
    "etvalue\030\002 \002(\014", 133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RPCMessage.proto", &protobuf_RegisterTypes);
  RPCRequest::default_instance_ = new RPCRequest();
  RPCResponse::default_instance_ = new RPCResponse();
  RPCRequest::default_instance_->InitAsDefaultInstance();
  RPCResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RPCMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RPCMessage_2eproto {
  StaticDescriptorInitializer_RPCMessage_2eproto() {
    protobuf_AddDesc_RPCMessage_2eproto();
  }
} static_descriptor_initializer_RPCMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RPCRequest::kCallidFieldNumber;
const int RPCRequest::kMethodNameFieldNumber;
const int RPCRequest::kParamsFieldNumber;
#endif  // !_MSC_VER

RPCRequest::RPCRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCRequest::InitAsDefaultInstance() {
}

RPCRequest::RPCRequest(const RPCRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCRequest::SharedCtor() {
  _cached_size_ = 0;
  callid_ = 0;
  methodname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCRequest::~RPCRequest() {
  SharedDtor();
}

void RPCRequest::SharedDtor() {
  if (methodname_ != &::google::protobuf::internal::kEmptyString) {
    delete methodname_;
  }
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    delete params_;
  }
  if (this != default_instance_) {
  }
}

void RPCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCRequest_descriptor_;
}

const RPCRequest& RPCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RPCMessage_2eproto();
  return *default_instance_;
}

RPCRequest* RPCRequest::default_instance_ = NULL;

RPCRequest* RPCRequest::New() const {
  return new RPCRequest;
}

void RPCRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    callid_ = 0;
    if (has_methodname()) {
      if (methodname_ != &::google::protobuf::internal::kEmptyString) {
        methodname_->clear();
      }
    }
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::kEmptyString) {
        params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callid_)));
          set_has_callid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_methodName;
        break;
      }

      // required string methodName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_methodName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_methodname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->methodname().data(), this->methodname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // required bytes params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callid(), output);
  }

  // required string methodName = 2;
  if (has_methodname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->methodname().data(), this->methodname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->methodname(), output);
  }

  // required bytes params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 callid = 1;
  if (has_callid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callid(), target);
  }

  // required string methodName = 2;
  if (has_methodname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->methodname().data(), this->methodname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->methodname(), target);
  }

  // required bytes params = 3;
  if (has_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callid());
    }

    // required string methodName = 2;
    if (has_methodname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->methodname());
    }

    // required bytes params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCRequest::MergeFrom(const RPCRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_methodname()) {
      set_methodname(from.methodname());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCRequest::CopyFrom(const RPCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RPCRequest::Swap(RPCRequest* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(methodname_, other->methodname_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCRequest_descriptor_;
  metadata.reflection = RPCRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPCResponse::kCallidFieldNumber;
const int RPCResponse::kRetvalueFieldNumber;
#endif  // !_MSC_VER

RPCResponse::RPCResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCResponse::InitAsDefaultInstance() {
}

RPCResponse::RPCResponse(const RPCResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCResponse::SharedCtor() {
  _cached_size_ = 0;
  callid_ = 0;
  retvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCResponse::~RPCResponse() {
  SharedDtor();
}

void RPCResponse::SharedDtor() {
  if (retvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete retvalue_;
  }
  if (this != default_instance_) {
  }
}

void RPCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCResponse_descriptor_;
}

const RPCResponse& RPCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RPCMessage_2eproto();
  return *default_instance_;
}

RPCResponse* RPCResponse::default_instance_ = NULL;

RPCResponse* RPCResponse::New() const {
  return new RPCResponse;
}

void RPCResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    callid_ = 0;
    if (has_retvalue()) {
      if (retvalue_ != &::google::protobuf::internal::kEmptyString) {
        retvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callid_)));
          set_has_callid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_retvalue;
        break;
      }

      // required bytes retvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_retvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_retvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 callid = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callid(), output);
  }

  // required bytes retvalue = 2;
  if (has_retvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->retvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 callid = 1;
  if (has_callid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callid(), target);
  }

  // required bytes retvalue = 2;
  if (has_retvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->retvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 callid = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callid());
    }

    // required bytes retvalue = 2;
    if (has_retvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->retvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCResponse::MergeFrom(const RPCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_retvalue()) {
      set_retvalue(from.retvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCResponse::CopyFrom(const RPCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RPCResponse::Swap(RPCResponse* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(retvalue_, other->retvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCResponse_descriptor_;
  metadata.reflection = RPCResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
